@mixin clearit {
    &:before,
   &:after {
       content: "";
       display: table;
   }
   &:after {
       clear: both;
   }
   zoom: 1;
}

/* @include transition(all,2s,ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
   -webkit-transition: $what $time $how;
   -moz-transition:    $what $time $how;
   -ms-transition:     $what $time $how;
   -o-transition:      $what $time $how;
   transition:         $what $time $how;
}

@mixin breakpoint($point) {
 @if $point == desktop {
   @media (min-width: 70em) { @content ; }
 }
 @else if $point == laptop {
   @media (min-width: 64em) { @content ; }
 }
 @else if $point == tablet {
   @media (min-width: 50em) { @content ; }
 }
 @else if $point == phablet {
   @media (min-width: 37.5em)  { @content ; }
 }
 @else if $point == mobileonly {
   @media (max-width: 767px)  { @content ; }
 }
 @else if $point == notmobile {
   @media (min-width: 768px)  { @content ; }
 }
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
 $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
 $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

 @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
 @if is-direction($value) == false {
   @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
 }

 $conversion-map: (
   to top          : bottom,
   to top right    : bottom left,
   to right top    : left bottom,
   to right        : left,
   to bottom right : top left,
   to right bottom : left top,
   to bottom       : top,
   to bottom left  : top right,
   to left bottom  : right top,
   to left         : right,
   to left top     : right bottom,
   to top left     : bottom right
 );

 @if map-has-key($conversion-map, $value) {
   @return map-get($conversion-map, $value);
 }

 @return 90deg - $value;
}

@mixin linear-gradient($direction, $color-stops...) {
 // Direction has been omitted and happens to be a color-stop
 @if is-direction($direction) == false {
   $color-stops: $direction, $color-stops;
   $direction: 180deg;
 }

 background: nth(nth($color-stops, 1), 1);
 background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
 background: linear-gradient($direction, $color-stops);
}

@mixin radial-gradient($innerColor: #1c1855, $outerColor: #171232)  {
 background-color: $outerColor;
 background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
 background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
 background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
 background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
 background-repeat: no-repeat;
}

@mixin background-opacity($color, $opacity: 0.3) {
   background-color: rgba($color, $opacity);
}




// margin and padding values array
$space-values : (
 0,
 3,
 5,
 10,
 15,
 20,
 25,
 30,
 35,
 40,
 45,
 50,
 100,
 140
) !default;

// margin and padding shorthands
$space-prefixes : (
 p  : padding,
 pt : padding-top,
 pr : padding-right,
 pb : padding-bottom,
 pl : padding-left,
 m  : margin,
 mt : margin-top,
 mr : margin-right,
 mb : margin-bottom,
 ml : margin-left,
) !default;

@mixin make-spaces() {
 @each $attr-short, $attr-long in $space-prefixes {
   @each $value in $space-values {
     .#{$attr-short}-#{$value} {
       #{$attr-long}: #{$value}#{'px'};
     }
   }
 }
}